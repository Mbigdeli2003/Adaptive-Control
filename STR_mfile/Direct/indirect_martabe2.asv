%%  Indirect STR- placemnet-nozero pole cancelled-martabe1
clc
clear all
close all
format long
syms q
%% deifine Uc
%define T 3Ts=3*8.93
t=0:1200;
% Uc=zeros(9*length(T));
u1=2*ones(1,length(t));
u2=-1*ones(1,length(t));
u3=ones(1,length(t));
Uc=[u1 u2 u3];
Uc=[Uc Uc];

%% define Tf
s=tf('s');
H=(s+0.5)/((3*s-1)*(s^2+0.7*s+1));
G=(s+0.5)/((3*s+1)*(s^2+0.7*s+1));
%% dicrtisize sys with 20*bandwidth
fh=bandwidth(H);
fg=bandwidth(G);
Th=1/(20*fh);
Hd=c2d(H,Th);
Tg=1/(20*fg);
Gd=c2d(G,Tg);
% H num & den
Ah=Hd.den{1,1};
Bh=Hd.num{1,1};
Ag=Gd.den{1,1};
Bg=Gd.num{1,1};
B_g=Bg(2:end);
%% sys identify
yh=zeros(1,length(Uc));
yg=zeros(1,length(Uc));
Y=zeros(1,length(Uc));
U=zeros(1,length(Uc));
phi_H= zeros(1,2);

k = zeros(length(phi_H(1,:)));
p = zeros(length(phi_H(1,:)));
alpha =1e10;
p(:,:,3) = alpha*eye(length(phi_H(1,:)));
teta_H = [zeros(2,1),zeros(2,1),zeros(2,1)];
phi_H= zeros(1,2);

K = zeros(length(phi_H(1,:)));
P = zeros(length(phi_H(1,:)));
alpha =1e10;
P(:,:,2) = alpha*eye(length(phi_H(1,:)));
teta_H_1 = [zeros(4,1),zeros(4,1),zeros(4,1)];

%% adaptive identification system H
for i=4:2000
 yh(i)=-(Ah(1,2)*yh(i-1))-Ah(1,3)*yh(i-2)-(Ah(1,4)*yh(i-3))+(Bh(1,2)*Uc(i-1))+(Bh(1,3)*Uc(i-2))+(Bh(1,4)*Uc(i-3));   
  phi_H(i,:)=[-yh(i-1)  Uc(i-1) ];
    k(:,i)=p(:,:,i-1)*phi_H(i,:)'/(1+phi_H(i,:)*p(:,:,i-1)*phi_H(i,:)');
    p(:,:,i)=(eye(length(phi_H(i,:)))-k(:,i)*phi_H(i,:))*p(:,:,i-1);
    teta_H(:,i)=teta_H(:,i-1)+k(:,i)*(yh(i)-phi_H(i,:)*teta_H(:,i-1));
A(i,1)=teta_H(1,i);
B(i,1)=teta_H(2,i);
end
%% system polynaminals defining with q
A_q=poly2sym([1 A(i,1)],q);
B_q=poly2sym(B(i,1),q);
%% define desired system no pole zero cancellation
Am=Ag(1,1:3);
%finding Beta Beta=Am(1)/B(1)
Beta=(sum(Am))/(sum(B(i,1)));
Bm=Beta*(B(i,1:2));
%system polynaminals defining with q
Am_q=poly2sym(Am,q);
Bm_q=poly2sym(Bm,q);
%% control with diophantine
B_plus=1;
B_minus=Bm_q;
%defining S R A0
a0=0.005;a1=0.01;%defining A0 coeffs
syms r0   s0  
R_q=r0;
S_q=s0;
A0_q=1;
%% diphontine Eq solve
Dioph=(A_q*R_q)+(B_q*S_q)-(A0_q*Am_q);
coef=coeffs(Dioph,q);
% sort equation with degree repectively q0...q^5
eq1=coef(1,1);eq2=coef(1,2);
% diphontine eq, finding parameters
Dioph_ans=solve(eq1,eq2);
%% finding R & S & T value
param_Cont=[Dioph_ans.r0  Dioph_ans.s0 ];
RS=sym2poly(param_Cont);
R=RS(1,1);S=RS(1,2);
T=sym2poly(A0_q);

%% testing controller obtaiend parameters Ru=TUc-Sy

for t=4:length(Uc)
    % main system
  yh(t)=-( A(i,1)*yh(t-1))-A(i,2)*yh(t-2)+(B(i,1)*Uc(t-1))+(B(i,2)*Uc(t-2));
end
for t=3:length(Uc)
      for j=2:length(Uc)
    U(j)=(T(1,1)-(S(1,1)*Y(j);
     
   Y(t)=-(A(i,1)*Y(t-1))+(B(i,1)*U(t-1));
     
      end 
end
for t=4:length(Uc)
  %  desired system
yg(t)=-(Ag(1,2)*yg(t-1))-Ag(1,3)*yg(t-2)-(Ag(1,4)*yg(t-3))+(Bg(1,2)*Uc(t-1))+(Bg(1,3)*Uc(t-2))+(Bg(1,4)*Uc(t-3));
%system with controller
% Y(i)=-(Ah(1,2)*yh(i-1))-Ah(1,3)*yh(i-2)-(Ah(1,4)*yh(i-3))+(Bh(1,2)*U(i-1))+(Bh(1,3)*U(i-2))+(Bh(1,4)*U(i-3));
end
 %% plotting
 figure;
 subplot(1,2,1)
 plot(Uc);legend('Uc');
 subplot(1,2,2);
 plot(Y,'b-','linewidth',2.5);hold on
 plot(yg,'r--','linewidth',2.5);legend('Y','yg')
 figure;plot(U);title('U')




































